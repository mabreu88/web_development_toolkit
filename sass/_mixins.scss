@use 'sass:map';
@use 'variables' as v;

/// ------------------------------------------------------------
/// üó∫Ô∏è MAPA DE BREAKPOINTS
/// ------------------------------------------------------------
/// 
/// Define los puntos de quiebre principales para el dise√±o responsive.
/// Cada clave del mapa representa un dispositivo o rango de pantalla.
/// 
/// ### Variables base:
/// - `v.$smartphone` ‚Üí ancho m√°ximo para smartphones.
/// - `v.$tablet` ‚Üí ancho m√≠nimo para tablets.
/// - `v.$desktop` ‚Üí ancho m√≠nimo para escritorios est√°ndar.
/// - `v.$desktopXL` ‚Üí ancho m√≠nimo para pantallas grandes.
///
/// ### Ejemplo de uso:
/// ```scss
/// @include respond-to(tablet) {
///   .container {
///     max-width: 90%;
///   }
/// }
/// ```
///
/// ### Resultado:
/// ```css
/// @media screen and (min-width: 768px) {
///   .container {
///     max-width: 90%;
///   }
/// }
/// ```
///
$breakpoints: (
  smartphone: v.$smartphone,
  tablet: v.$tablet,
  desktop: v.$desktop,
  desktopXL: v.$desktopXL
);


/// ------------------------------------------------------------
/// üì± @mixin respond-to($device)
/// ------------------------------------------------------------
/// 
/// Genera una **media query adaptable** en funci√≥n de los breakpoints definidos
/// en el mapa `$breakpoints`.
///
/// ### Par√°metros:
/// - **$device** *(string)*: nombre del breakpoint declarado en `$breakpoints`.
///
/// ### Funcionalidad:
/// - Obtiene el valor del breakpoint desde el mapa con `map.get()`.
/// - Si el breakpoint existe, genera una media query con `min-width`.
/// - Si el breakpoint no existe, muestra una advertencia en la compilaci√≥n.
///
/// ### Ejemplo de uso:
/// ```scss
/// .nav {
///   @include respond-to(desktop) {
///     display: flex;
///     justify-content: space-between;
///   }
/// }
/// ```
///
/// ### Resultado:
/// ```css
/// @media screen and (min-width: 1200px) {
///   .nav {
///     display: flex;
///     justify-content: space-between;
///   }
/// }
/// ```
///
/// ### Notas:
/// - Se recomienda usar nombres coherentes con los definidos en `$breakpoints`.
/// - Si el nombre no coincide, Sass emitir√° una advertencia:
///   `"‚ö†Ô∏è Breakpoint 'nombre' no existe en el mapa de breakpoints."`
///
@mixin respond-to($device) {
  $size: map.get($breakpoints, $device);

  @if $size {
    @media screen and (min-width: #{$size}) {
      @content;
    }
  } @else {
    @warn "‚ö†Ô∏è Breakpoint '#{$device}' no existe en el mapa de breakpoints.";
  }
}


/// ------------------------------------------------------------
/// üß± @mixin grid($columns: 1, $gap: 5rem)
/// ------------------------------------------------------------
/// 
/// Crea un contenedor con **dise√±o de cuadr√≠cula (CSS Grid)** flexible y
/// configurable.
///
/// ### Par√°metros:
/// - **$columns** *(number)*: cantidad de columnas.  
///   - *Por defecto:* `1`  
///   - Se usa en `grid-template-columns: repeat($columns, 1fr);`
///
/// - **$gap** *(length)*: espacio entre los elementos.  
///   - *Por defecto:* `5rem`  
///   - Se aplica a la propiedad `gap`.
///
/// ### Ejemplo de uso:
/// ```scss
/// .gallery {
///   @include grid(3, 2rem);
/// }
/// ```
///
/// ### Resultado:
/// ```css
/// .gallery {
///   display: grid;
///   grid-template-columns: repeat(3, 1fr);
///   gap: 2rem;
/// }
/// ```
///
/// ### Descripci√≥n:
/// Este mixin simplifica la creaci√≥n de layouts con **CSS Grid**, permitiendo
/// definir f√°cilmente la cantidad de columnas y el espaciado entre elementos.
/// Ideal para galer√≠as, tarjetas, secciones o layouts responsivos.
///
@mixin grid($columns: 1, $gap: 5rem) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}
